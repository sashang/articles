Code completion in Vim for iOS
==============================
Sashan Govender

I recently started doing iOS developement. It's great to be starting something
new and learning new things. I've enjoyed learning Objective-C although I have a
strong C++ background. But one thing that is annoying is having to learn the
key bindings of yet another IDE. I've had to learn the bindings of Visual Studio,
Eclipse and this time it's XCode. Why can't I just use a single editor that I
know well enough that works on all platforms to do my coding? And given that 
my work patterns at the moment require me to chop and change between developing
on Windows to Linux to Mac OS X *daily*, the most irritating thing is having to
switch editing environments. It's really frustrating when you press a key
combination that's been wired to your muscle memory to find out it does the
wrong thing because you're not editing in the editor you thought you were. I
know Vim fairly well and am a relatively fluent user of it so naturally I wanted
to use it for iOS devlepement. But XCode has such nice code completion? Enter
http://www.vim.org/scripts/script.php?script_id=3302[clang_complete]. It's a
plugin for Vim that uses clang to perform code completion. clang is also used by
XCode for the same reason. Eventually it will replace the gcc-llvm compiler. I
downloaded and installed the script but it didn't work for my objective-c code
for iOS. By running `xcodebuild` in verbose mode to see what commands were passed
through to the compiler I was able to come up with the command line arguments to
configure clang_complete with.

--------------------------------------------------------------------------------
CompileC build/CrimeBook.build/Release-iphonesimulator/CrimeBook.build/Objects-normal/i386/main.o CrimeBook/main.m normal i386 objective-c com.apple.compilers.llvmgcc42
    cd /Users/sashan/code/CrimeBook
    setenv LANG en_US.US-ASCII
    setenv PATH "/Developer/Platforms/iPhoneSimulator.platform/Developer/usr/bin:/Developer/usr/bin:/opt/local/bin:/opt/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/X11/bin"
    /Developer/Platforms/iPhoneSimulator.platform/Developer/usr/bin/llvm-gcc-4.2 -x objective-c -arch i386 -fmessage-length=0 -pipe -std=gnu99 -Wno-trigraphs -fpascal-strings -Os -mdynamic-no-pic -Wreturn-type -Wunused-variable -isysroot /Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator4.3.sdk -fexceptions -fasm-blocks -mmacosx-version-min=10.6 -gdwarf-2 -fvisibility=hidden -fobjc-abi-version=2 -fobjc-legacy-dispatch -D__IPHONE_OS_VERSION_MIN_REQUIRED=40300 -iquote /Users/sashan/code/CrimeBook/build/CrimeBook.build/Release-iphonesimulator/CrimeBook.build/CrimeBook-generated-files.hmap -I/Users/sashan/code/CrimeBook/build/CrimeBook.build/Release-iphonesimulator/CrimeBook.build/CrimeBook-own-target-headers.hmap -I/Users/sashan/code/CrimeBook/build/CrimeBook.build/Release-iphonesimulator/CrimeBook.build/CrimeBook-all-target-headers.hmap -iquote /Users/sashan/code/CrimeBook/build/CrimeBook.build/Release-iphonesimulator/CrimeBook.build/CrimeBook-project-headers.hmap -I/Users/sashan/code/CrimeBook/build/Release-iphonesimulator/include -I/Users/sashan/code/CrimeBook/build/CrimeBook.build/Release-iphonesimulator/CrimeBook.build/DerivedSources/i386 -I/Users/sashan/code/CrimeBook/build/CrimeBook.build/Release-iphonesimulator/CrimeBook.build/DerivedSources -F/Users/sashan/code/CrimeBook/build/Release-iphonesimulator -DNS_BLOCK_ASSERTIONS=1 -include /var/folders/vx/vx-91r-0HPqbIKIRlmQhbk+++TI/-Caches-/com.apple.Xcode.501/SharedPrecompiledHeaders/CrimeBook-Prefix-bemjhtzaxsuzvgcgukqqlhmzivkm/CrimeBook-Prefix.pch -c /Users/sashan/code/CrimeBook/CrimeBook/main.m -o /Users/sashan/code/CrimeBook/build/CrimeBook.build/Release-iphonesimulator/CrimeBook.build/Objects-normal/i386/main.o
--------------------------------------------------------------------------------

Stripping away much of the above by trial and error revealed the pertinent
options to pass to `clang` that would allow a single file to compile were:

--------------------------------------------------------------------------------
clang -fblocks -isysroot /Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator4.3.sdk -D__IPHONE_OS_VERSION_MIN_REQUIRED=40300 main.m
--------------------------------------------------------------------------------

I placed this in the `clang_user_options` variable in my .vimrc and code
completion worked.

--------------------------------------------------------------------------------
let g:clang_user_options='-fblocks -isysroot /Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator4.3.sdk -D__IPHONE_OS_VERSION_MIN_REQUIRED=40300'
--------------------------------------------------------------------------------

Then I added a function to vim to run xcodebuild. This function runs xcodebuild
and puts the output from the run into the quickfix list. From there you can
navigate the build errors by using `:cwindow`. Call the function from the vim
command line like `:call XCodeBuild`

--------------------------------------------------------------------------------
function! XCodeBuild()
  let l:command = 'xcodebuild -sdk iphonesimulator4.3'
  let l:out = system(l:command)
  cexpr l:out
endfunction
--------------------------------------------------------------------------------


