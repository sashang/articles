Trivial Monad Example in F#
===========================
Sashan Govender

I was reading through the various monad tutorials on the web. There's one
http://enfranchisedmind.com/blog/posts/a-monad-tutorial-for-ocaml[here in OCaml]
and there's a spiel
http://channel9.msdn.com/Shows/Going+Deep/Brian-Beckman-The-Zen-of-Expressing-State-The-State-Monad[here
that goes into lots of detail] but even after reading all these explanations
stuff wasn't really sinking in. What was the use of creating these monadic
types? It kinda sunk in when I realized that the thing you put into a monad is a
chunk of code and that monads allow you to define operations on that chunk of
code in a sane manner. I also figured that to apply it I needed some practice
with them. So I concocted the example below. It's somewhat contrived but it
illustrate the problem that monads can solve.

The example below shows a typical flow of code that alot of programmers would be
familiar with. Basically it's an 'if input is bad then fail else apply
function F on that something where F checks if input is bad then fail else apply
function H on input etc....' This scenario can lead to a sequence of nested 'if
... then' statements or in the example below nested 'match' statements.

[source,caml]
--------------------------------------------------------------------------------
let mul_3 x = 
  printfn "3x"
  Some (x * 3)

let mul_4 x = 
  printfn "4x"
  Some (x * 4)

let foo () =
  match (Some 2) with
  | None -> None
  | Some thing -> 
      match (mul_3 thing) with
      | None -> None
      | Some thing ->
        match (mul_4 thing) with
        | None -> None
        | Some thing -> Some thing
--------------------------------------------------------------------------------

So how do we solve this? Well a good programmer will recognize the repeated
nested match statements and try to devise a function to abstract this away.
Typically in 'monad speak' this function is called the 'bind' function. So what
should the function do? Analyzing the repeated code in 'foo' above we can
deduce it's fundamental input parameters.

[source,caml]
--------------------------------------------------------------------------------
  match (... param1 ...) with
  | None -> None
  | Some thing -> ..... param 2 ....
--------------------------------------------------------------------------------

This tells us that one of the parameters is the monadic type itself and the
other param is a chunk of code and therefore a function. Therefore we can define
our 'bind' function as

[source,caml]
--------------------------------------------------------------------------------
let bind (m : option<'a>)  (f : 'a -> option<'b>) : option<'b> =
  match m with
  | None -> None
  | Some x -> f x
--------------------------------------------------------------------------------

All this means is: if there is nothing then don't do anything otherwise apply
the given function, `f`, on the value 'x'. Note that the type parameters `'a`
and `'b` are in general different but in this example they evaluate to the same
underlying type, an `int`.

[source,caml]
--------------------------------------------------------------------------------
let bar () =
  bind (bind (Some 2) mul_3) (fun x -> mul_4 x)
--------------------------------------------------------------------------------

