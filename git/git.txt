Notes about Git
===============
Sashan Govender

These are my notes about git for use as quick reference. The notes describe
using git and git with svn. In the case of svn the header is marked with `svn`.

Fundamentals
------------

Typically a version control system has a repository where it stores the history
of all changes. Then there's your local development directory where you checkout
a copy of the repositories contents, do some edits and then commit them back to
the repository. Git breaks this model and adds an intermediate stage called the
'index' that sits between your working directory and the git repository. Changes
make there way from the working tree to the index then to the repository.

image::git_commit_workflow.png["Commit Workflow", title="Commit Workflow"]

.Checking out repository

Use `git clone ...` to clone a git repository locally.

--------------------------------------------------------
git clone ssh://git@github.com/repo_path/repo.git
--------------------------------------------------------

.Checking out repository (svn)

You can use git with a svn repository. Note that this step can take a few hours
because git checkouts out every revision in the svn repository and commits it
locally.
--------------------------------------------------------
git svn clone http://llvm.org/svn/llvm-project/libcxx/trunk libcxx
--------------------------------------------------------

.Updating your sources

--------------------------------------------------------
git pull
--------------------------------------------------------

.Updating your sources (svn)

--------------------------------------------------------
git svn rebase
--------------------------------------------------------

.Updating your sources after editing

--------------------------------------------------------
sashan@cyclops clang master $ git svn rebase
include/clang/AST/Stmt.h: needs update
lib/AST/Stmt.cpp: needs update
update-index --refresh: command returned error: 1
--------------------------------------------------------

Oops ... git's complaining that you have edited files in the working tree. Use
*git stash* to save the changes locally.

--------------------------------------------------------
sashan@cyclops clang master 1 $ git stash
Saved working directory and index state WIP on master: 3923c27 Fix diagnostic reporting of previous default statements.
HEAD is now at 3923c27 Fix diagnostic reporting of previous default statements.
--------------------------------------------------------

Now you can rebase.

--------------------------------------------------------
sashan@cyclops clang master $ git svn rebase
	M	docs/UsersManual.html
r121768 = 024394010048e704192f4f34f21836a550f37a9f (refs/remotes/git-svn)
--------------------------------------------------------

And then apply the stashed changes

--------------------------------------------------------
sashan@cyclops clang master 1 $ git stash pop
--------------------------------------------------------

.Committing changes in the working tree directly to the repository

This will add all editted files to index and then to repository. It will also
prompt you to enter a commit log message. The +-a+ parameter tells git to add
all edited files.

--------------------------------------------------------
sashan@cyclops clang master $ git commit -a
--------------------------------------------------------

.Selecting the files to commit

This stages files for committing adding them to the index.

--------------------------------------------------------
sashan@cyclops clang master $ git add <file name>
--------------------------------------------------------

After this you should run +git commit+ to commit the files. This will commit the
changes to your local repository.

.Committing to a svn repository

When you're happy with the changes made locally you can commit them to the
upstream repository as shown below:

--------------------------------------------------------
sashan@cyclops clang master $ git svn dcommit
--------------------------------------------------------

.Generating a patch for email submission

This will generate a patch file of the most recent commit that you can email as
an attachment.

--------------------------------------------------------
sashan@cyclops clang master $ git format-patch -1 -p
0001-Fix-diagnostic-reporting-of-previous-default-stateme.patch
--------------------------------------------------------

.Adding edited files to the index

Sometimes you want to add changes in the working tree to the index without
committing to the repository at the same time. In this case doing a +git commit
-a+ won't help. You need to use +git add+. The example below shows a session
using +git add -ui+. The '-u' is for update and means that only modified paths
in the working tree will be added to the index. New paths won't.  The '-i' is
for interactive and therefore git will prompt you for a response. In the session
below I enter interactive mode, choose to update the index, and then select a
range of paths, 1 to 7, to update the index with. Importantly, after finishing
the update I 'hit enter to exit the interactive update mode'.

--------------------------------------------------------
sashan@cyclops clang use_std_set_for_switch_cases $ git add -ui
           staged     unstaged path
  1:    unchanged      +51/-31 include/clang/AST/Stmt.h
  2:    unchanged        +6/-1 lib/AST/Stmt.cpp
  3:    unchanged        +4/-4 lib/Sema/JumpDiagnostics.cpp
  4:    unchanged        +5/-3 lib/Sema/SemaCodeComplete.cpp
  5:    unchanged       +14/-6 lib/Sema/SemaStmt.cpp
  6:    unchanged        +8/-2 lib/Serialization/ASTReaderStmt.cpp
  7:    unchanged        +3/-3 lib/Serialization/ASTWriterStmt.cpp

*** Commands ***
  1: status	  2: update	  3: revert	  4: add untracked
  5: patch	  6: diff	  7: quit	  8: help
What now> 2
           staged     unstaged path
  1:    unchanged      +51/-31 include/clang/AST/Stmt.h
  2:    unchanged        +6/-1 lib/AST/Stmt.cpp
  3:    unchanged        +4/-4 lib/Sema/JumpDiagnostics.cpp
  4:    unchanged        +5/-3 lib/Sema/SemaCodeComplete.cpp
  5:    unchanged       +14/-6 lib/Sema/SemaStmt.cpp
  6:    unchanged        +8/-2 lib/Serialization/ASTReaderStmt.cpp
  7:    unchanged        +3/-3 lib/Serialization/ASTWriterStmt.cpp
Update>> 1-7
           staged     unstaged path
* 1:    unchanged      +51/-31 include/clang/AST/Stmt.h
* 2:    unchanged        +6/-1 lib/AST/Stmt.cpp
* 3:    unchanged        +4/-4 lib/Sema/JumpDiagnostics.cpp
* 4:    unchanged        +5/-3 lib/Sema/SemaCodeComplete.cpp
* 5:    unchanged       +14/-6 lib/Sema/SemaStmt.cpp
* 6:    unchanged        +8/-2 lib/Serialization/ASTReaderStmt.cpp
* 7:    unchanged        +3/-3 lib/Serialization/ASTWriterStmt.cpp
Update>> 
updated 7 paths

*** Commands ***
  1: status	  2: update	  3: revert	  4: add untracked
  5: patch	  6: diff	  7: quit	  8: help
What now> 7
Bye.
--------------------------------------------------------

.Bisecting to find the commit that introduced new behaviour

git bisect lets you find a commit that resulted in different behaviour. The man
page describes it as 'git-bisect - Find by binary search the change that
introduced a bug' but it's a slightly misleading since it really finds the
commit that introduced a certain behaviour and behaviour in this case, doesn't
have to be a bug.

Anyway, to start, find out the commit hashes within which you know the behaviour
changed and pass them to `git start ... ` as shown below with the oldest commit
hash first:

--------------------------------------------------------
sashan@cyclops src (no $ git bisect start 22e6ee96f2daab9b7fcc135eff8ec133579da12d 7639a06e1d7f014929a9ab22fe5a35153bf9be85
--------------------------------------------------------

git will checkout a branch with the head set to a commit in the middle of the 2
commits identified by the hashes above. Build the program and test for the
desired behaviour. If what you see in the new build is the desired behaviour
then mark it with `git bisect good` otherwise mark it with `git bisect bad`.
Keep doing this until there are 0 bisections left. The head of the tree now will
be at the commit that introduced the change.


Anyway, to start, find out the commit hashes within which you know the behaviour
changed and pass them to `git start ... ` as shown below with the oldest commit
hash first:

--------------------------------------------------------
sashan@cyclops src (no $ git bisect start 22e6ee96f2daab9b7fcc135eff8ec133579da12d 7639a06e1d7f014929a9ab22fe5a35153bf9be85
--------------------------------------------------------

git will checkout a branch with the head set to a commit in the middle of the 2
commits identified by the hashes above. Build the program and test for the
desired behaviour. If what you see in the new build is the desired behaviour
then mark it with `git bisect good` otherwise mark it with `git bisect bad`.
Keep doing this until there are 0 bisections left. The head of the tree now will
be at the commit that introduced the change.

.Rewriting History

Hopefully this is something you will never need to do but sometimes people stupidly commit binaries
and tarballs and password files into the repository. To remove them use `git filter-branch`

-----------------------------------------------------
git filter-branch -f --tree-filter \
  "rm -rf *.tar.gz; rm -rf some/shitty/dir" \
  --tag-name-filter "cat" --prune-empty -- --all
-----------------------------------------------------

The `tree-filter` option takes a shell command and executes it from the root of the repository. The
option `--tag-name-filter` renames the tags. In this case `cat` is the command so the tag name
remains the same as the original.

