Karger's Min Cut
================
Sashan Govender

A minimum cut of a graph is the minimum number of edges of a graph that is needed such that the
graph remains connected. Karger's min cut algorithm is a process that takes a given graph finds
these edges. It's a random algorithm because the edge it picks at each stage is randomly choosen.
That edge is removed and one endpoint of the edge collapses onto the other endpoint. The edges of
attached to the collapsed vertex attach to the new vertex, the vertex that is collapsed to. The
process repeats, choosing at random another edge, and collapsing the end points. The process is
illustrated in the following sequence of diagrams.

image:4cycle.png["Initial Graph", title="Intial Graph"]

Here the edge {1,3} is randomly selected and we decide to collapse vertex 3 to vertex 1.

image:4cycle-collapse-3to1.png["Collapse edge 1 3", title="Collapse edge {1,3}"]

This results in the following graph where vertex 3 has disappeared into vertex 1 and it's edges are
now effectively attached to vertex 1. Now we select one of the edges {1,2} and collapse vertex 2
onto vertex 1.

image:4cycle-collapsed-2to1.png["Collapse edge 2 1", title="Collapse edge {2,1}"]

This results in the following graph with a loop from vertex 1 to vertex 1. This was the other {2,1}
edge in the previous graph. Self loops like this are removed. This is the final graph. Once we get
to 2 nodes we stop. We can see that the number of edges is 2 therefore the minimum number of edges
for a minimum cut of the graph is 2.

image:4cycle-1loop.png["Final", title="Final result{2,1}"]

Note that this isn't the only solution. The algorithm, because it randomly picks edges, could have
come up with a min cut of 3. Therefore you have to run the algorithm multiple times to increase the
probabilty of getting the mimimum cut.

My first attempt at this was in `C++`. I modelled the adjacency list of vertices using a vector and
each element contained a vector of edges that were connected to the vertex. Each edge contained two
endpoints which were pointers to vertices. The adjaceny list of edges was a vector of these edges.
My first attempt didn't work. I got my head in spin trying to logically reason about pointers to
vertices to edges that contained pointers to vertices, and the whole thing didn't work properly. I
was surprised that I couldn't get it right, and frustrated since I'd spent a few days on it.
Eventually I bit the bullet and decided to start from scratch again, but this time, by choosing a
simpler representation of the graph. I still used an adjacency list but instead of pointers used the
vertex labels. For example, the vertex list for the graph above is `[1 => [4,3,2], 2 => [1,3], 3 =>
[2,4,1], 4=>[1,3]`. The corresponding edge list is `[{1,2},{2,3},{3,4},{4,1},{1,3}]`. Then, with a
pen and paper I stepped through what would happen if an edge was removed and the endpoints
collapsed. It allowed me to observe the changes to the lists themselves and come up with a different
algorithm for collapsing a vertex, one that was not based on the pictorial representation above,
that I coded in `C++`.

* Pick a random edge, call the endpoints `i` and `j`. Let `j` be the vertex that is collapsing.
* Remove edge `{i,j}` from the list of edges
* In the list of edges replace all occurrences of `j` with `i`.
* Remove self loops from the edge list.
* Find the vertices connected to vertex `j` excluding `i`
* Append those vertices to the vertex `i`
* Remove vertex `j` from the list of vertices.
* For each vertex, replace all occurences of `j` with `i` in that vertex's list of vertices.

I reimplemented the algorithm in link:elixir-lang.org[Elixir] and decided not to publish the source
code since this is an assignment question from the Stanford Algorithm Design course on
link:Coursera.org[Coursera].

Written in link:http://www.methods.co.nz/asciidoc/[Asciidoc] using link:http://www.vim.org/[Vim].
