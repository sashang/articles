C++ Lambda Expressions
======================
Sashan Govender

In C++ 2003, algorithms such as +for_each+ combined with a container class such
as +vector+ alluded to being able to apply a function to each element in the
container. And you could, but first you had to define the functor by overloading
the +operator()+ within a new class and then, depending on what you wanted to
do, invoke +std::bind1st+ to convert a mulitple argument function into a unary
function and by the time you'd done all of that it *just didn't seem worth the
effort* when compared with iterating over the container in a for loop. Something
realtively simple, like printing the contents of a vector to the screen, became
a non-obvious task involving the use of an +ostream_iterator+.
For example:
[source,cpp]
--------------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <iterator>
#include <algorithm>

int main(int argc, char* argv[])
{
  std::vector<int> v;

  v.push_back(1);
  v.push_back(2);
  v.push_back(3);

  std::copy(v.begin(), v.end(), std::ostream_iterator<int>(std::cout, "\n"));
}
-------------------------------------------------------------------------------

`C++0X` brings lamda expressions to the language. Without going into extreme
detail a lamda expression allows the programmer to define an anonymous function
in the current lexical scope. The above can be done simply like this:

[source,cpp]
--------------------------------------------------------------------------------
#include <algorithm>
#include <vector>
#include <iostream>

int main(int argc, char* argv[])
{
  std::vector<int> v = {1,2,3};  // <1>
  for_each(v.begin(), v.end(), [](int x) { std::cout << x << "\n"; }); // <2>
}
--------------------------------------------------------------------------------
<1> This is an initializer list, another `C++0X` feature.
<2> The lambda expression.

Compiled using a version of gcc that supports `C++0X`:

--------------------------------------------------------------------------------
g++ -o lamda -std=c++0x lamda.cpp
--------------------------------------------------------------------------------

